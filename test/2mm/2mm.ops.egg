(include "src/base.egg")

;;;; linalg dialect ;;;;
(function linalg_matmul (Op Op Op Type) Op)

;;;; tensor dialect ;;;;
(function tensor_empty (Type) Op)

;; OPS HERE ;;
; _2mm_func.func
(let op0 (Value 0 (RankedTensor (vec-of 100 10) (I64))))
(let op1 (Value 1 (RankedTensor (vec-of 10 150) (I64))))
(let op2 (Value 2 (RankedTensor (vec-of 150 8) (I64))))
(let op3 (tensor_empty (RankedTensor (vec-of 100 150) (I64))))
(let op4 (linalg_matmul op0 op1 op3 (RankedTensor (vec-of 100 150) (I64))))
(let op5 (tensor_empty (RankedTensor (vec-of 100 8) (I64))))
(let op6 (linalg_matmul op4 op2 op5 (RankedTensor (vec-of 100 8) (I64))))
(let op7 (Value 7 (None)))

;; RULES HERE ;;
(ruleset rules)

; (rule ((= ?A (tensor_empty ?t))) ((set (type-of ?A) ?t)) :ruleset rules)
(rule ((= ?A (Value ?id ?t))) ((set (type-of ?A) ?t)) :ruleset rules)
(rule ((= ?A (linalg_matmul ?x ?y ?o ?t))) ((set (type-of ?A) ?t)) :ruleset rules)

(function nrows (Type) i64)
(function ncols (Type) i64)
(rule ((= ?t (RankedTensor ?shape ?tp))) 
    ((set (nrows ?t) (vec-get ?shape 0)) 
     (set (ncols ?t) (vec-get ?shape 1)))
    :ruleset rules
)

(rule 
    ((linalg_matmul ?x ?y ?xy ?t)
     (= a (nrows (type-of ?x)))
     (= b (ncols (type-of ?x)))
     (= c (ncols (type-of ?y))))

    ((unstable-cost (linalg_matmul ?x ?y ?xy ?t) (* (* a b) c)))
    :ruleset rules
)

(rule
    ((= ?lhs (linalg_matmul (linalg_matmul ?x ?y ?xy ?xy_t) ?z ?xy_z ?xyz_t))
     (= ?b (nrows (type-of ?y)))
     (= ?d (ncols (type-of ?z)))
     (= ?xyz_t (RankedTensor ? ?t)))
    
    ((let out_t (RankedTensor (vec-of ?b ?d) ?t))
     (union ?lhs (linalg_matmul ?x (linalg_matmul ?y ?z (tensor_empty out_t) out_t) ?xy_z ?xyz_t)))
    :ruleset rules
)

(run-schedule (saturate rules))

;; EXTRACTS HERE ;;
(extract op6)
