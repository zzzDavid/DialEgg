(include "src/base.egg")

;;;; Additional Type Definitions ;;;;
(function Int2 () Type)
(function Int3 () Type)
(function Int9 () Type)
(function Int10 () Type)
(function Int18 () Type)

;;;; comb dialect ;;;;
(function comb_mux (Op Op Op Type) Op)
(function comb_add (Op Op Op Op Op Op Op Op Op Op Op Op Op Op Op Op Op Op Type) Op)
(function comb_concat (Op Op Type) Op)
(function comb_extract (Op AttrPair Type) Op)
(function comb_mul (Op Op Type) Op)

;;;; hw dialect ;;;;
(function hw_output (Op) Op)
(function hw_constant (AttrPair Type) Op)

;;;; seq dialect ;;;;
(function seq_to_clock (Op Type) Op)
(function seq_firreg (Op Op Type) Op)

;; OPS HERE ;;
; top_module_hw.module
(let op0 (Value 0 (I1)))
(let op1 (Value 1 (I1)))
(let op2 (Value 2 (I8)))
(let op3 (hw_constant (NamedAttr "value" (IntegerAttr 0 (Int10))) (Int10)))
(let op4 (hw_constant (NamedAttr "value" (IntegerAttr 41 (Int10))) (Int10)))
(let op5 (hw_constant (NamedAttr "value" (IntegerAttr 37 (Int10))) (Int10)))
(let op6 (hw_constant (NamedAttr "value" (IntegerAttr 30 (Int10))) (Int10)))
(let op7 (hw_constant (NamedAttr "value" (IntegerAttr 21 (Int10))) (Int10)))
(let op8 (hw_constant (NamedAttr "value" (IntegerAttr 12 (Int10))) (Int10)))
(let op9 (hw_constant (NamedAttr "value" (IntegerAttr 3 (Int10))) (Int10)))
(let op10 (hw_constant (NamedAttr "value" (IntegerAttr 0 (Int2))) (Int2)))
(let op11 (hw_constant (NamedAttr "value" (IntegerAttr 0 (I1))) (I1)))
(let op12 (comb_concat op10 op2 (Int10)))
(let op13 (comb_mul op12 op9 (Int10)))
(let op14 (Value 14 (Int10)))
(let op15 (comb_extract op14 (NamedAttr "lowBit" (IntegerAttr 0 (I32))) (Int9)))
(let op16 (comb_concat op15 op11 (Int10)))
(let op17 (Value 17 (Int10)))
(let op18 (comb_extract op17 (NamedAttr "lowBit" (IntegerAttr 0 (I32))) (I8)))
(let op19 (comb_concat op18 op10 (Int10)))
(let op20 (Value 20 (Int10)))
(let op21 (comb_mul op20 op8 (Int10)))
(let op22 (Value 22 (Int10)))
(let op23 (comb_mul op22 op7 (Int10)))
(let op24 (Value 24 (Int10)))
(let op25 (comb_mul op24 op6 (Int10)))
(let op26 (Value 26 (Int10)))
(let op27 (comb_mul op26 op5 (Int10)))
(let op28 (Value 28 (Int10)))
(let op29 (comb_mul op28 op4 (Int10)))
(let op30 (Value 30 (Int10)))
(let op31 (comb_mul op30 op4 (Int10)))
(let op32 (Value 32 (Int10)))
(let op33 (comb_mul op32 op5 (Int10)))
(let op34 (Value 34 (Int10)))
(let op35 (comb_mul op34 op6 (Int10)))
(let op36 (Value 36 (Int10)))
(let op37 (comb_mul op36 op7 (Int10)))
(let op38 (Value 38 (Int10)))
(let op39 (comb_mul op38 op8 (Int10)))
(let op40 (Value 40 (Int10)))
(let op41 (comb_extract op40 (NamedAttr "lowBit" (IntegerAttr 0 (I32))) (I8)))
(let op42 (comb_concat op41 op10 (Int10)))
(let op43 (Value 43 (Int10)))
(let op44 (comb_extract op43 (NamedAttr "lowBit" (IntegerAttr 0 (I32))) (Int9)))
(let op45 (comb_concat op44 op11 (Int10)))
(let op46 (Value 46 (Int10)))
(let op47 (comb_mul op46 op9 (Int10)))
(let op48 (Value 48 (Int10)))
(let op49 (Value 49 (Int10)))
(let op50 (comb_add op13 op16 op48 op19 op21 op23 op25 op27 op29 op31 op33 op35 op37 op39 op42 op49 op45 op47 (Int10)))
(let op51 (comb_mux op1 op3 op12 (Int10)))
(let op52 (comb_mux op1 op3 op14 (Int10)))
(let op53 (comb_mux op1 op3 op48 (Int10)))
(let op54 (Value 54 (Int10)))
(let op55 (comb_mux op1 op3 op54 (Int10)))
(let op56 (Value 56 (Int10)))
(let op57 (comb_mux op1 op3 op56 (Int10)))
(let op58 (Value 58 (Int10)))
(let op59 (comb_mux op1 op3 op58 (Int10)))
(let op60 (Value 60 (Int10)))
(let op61 (comb_mux op1 op3 op60 (Int10)))
(let op62 (Value 62 (Int10)))
(let op63 (comb_mux op1 op3 op62 (Int10)))
(let op64 (Value 64 (Int10)))
(let op65 (comb_mux op1 op3 op64 (Int10)))
(let op66 (Value 66 (Int10)))
(let op67 (comb_mux op1 op3 op66 (Int10)))
(let op68 (comb_mux op1 op3 op17 (Int10)))
(let op69 (comb_mux op1 op3 op20 (Int10)))
(let op70 (comb_mux op1 op3 op22 (Int10)))
(let op71 (comb_mux op1 op3 op24 (Int10)))
(let op72 (comb_mux op1 op3 op26 (Int10)))
(let op73 (comb_mux op1 op3 op28 (Int10)))
(let op74 (comb_mux op1 op3 op30 (Int10)))
(let op75 (comb_mux op1 op3 op32 (Int10)))
(let op76 (comb_mux op1 op3 op34 (Int10)))
(let op77 (comb_mux op1 op3 op36 (Int10)))
(let op78 (comb_mux op1 op3 op38 (Int10)))
(let op79 (comb_mux op1 op3 op40 (Int10)))
(let op80 (Value 80 (Int10)))
(let op81 (comb_mux op1 op3 op80 (Int10)))
(let op82 (Value 82 (Int10)))
(let op83 (comb_mux op1 op3 op82 (Int10)))
(let op84 (Value 84 (Int10)))
(let op85 (comb_mux op1 op3 op84 (Int10)))
(let op86 (Value 86 (Int10)))
(let op87 (comb_mux op1 op3 op86 (Int10)))
(let op88 (Value 88 (Int10)))
(let op89 (comb_mux op1 op3 op88 (Int10)))
(let op90 (Value 90 (Int10)))
(let op91 (comb_mux op1 op3 op90 (Int10)))
(let op92 (Value 92 (Int10)))
(let op93 (comb_mux op1 op3 op92 (Int10)))
(let op94 (comb_mux op1 op3 op49 (Int10)))
(let op95 (comb_mux op1 op3 op43 (Int10)))
(let op96 (seq_to_clock op0 (OpaqueType "!seq.clock" "seq.clock")))
(let op97 (hw_output op50))

;; RULES HERE ;;
(ruleset rules)

(run-schedule (saturate rules))

;; EXTRACTS HERE ;;
(extract op51)
(extract op52)
(extract op53)
(extract op55)
(extract op57)
(extract op59)
(extract op61)
(extract op63)
(extract op65)
(extract op67)
(extract op68)
(extract op69)
(extract op70)
(extract op71)
(extract op72)
(extract op73)
(extract op74)
(extract op75)
(extract op76)
(extract op77)
(extract op78)
(extract op79)
(extract op81)
(extract op83)
(extract op85)
(extract op87)
(extract op89)
(extract op91)
(extract op93)
(extract op94)
(extract op95)
(extract op96)
(extract op97)
