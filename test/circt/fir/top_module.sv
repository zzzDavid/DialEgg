// Generated by CIRCT unknown git version

// Include register initializers in init blocks unless synthesis is set	// <stdin>:36:5
`ifndef RANDOMIZE	// <stdin>:37:5
  `ifdef RANDOMIZE_REG_INIT	// <stdin>:39:7
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef SYNTHESIS	// <stdin>:43:5
  `ifndef ENABLE_INITIAL_REG_	// <stdin>:45:7
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS
	// <stdin>:50:5
// Standard header to adapt well known macros for register randomization.	// <stdin>:5:5

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.	// <stdin>:6:5
`ifndef RANDOM	// <stdin>:7:5
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.	// <stdin>:11:5
`ifndef INIT_RANDOM	// <stdin>:12:5
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.	// <stdin>:16:5
`ifndef RANDOMIZE_DELAY	// <stdin>:17:5
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.	// <stdin>:21:5
`ifndef INIT_RANDOM_PROLOG_	// <stdin>:22:5
  `ifdef RANDOMIZE	// <stdin>:24:7
    `ifdef VERILATOR	// <stdin>:25:9
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_
module top_module(	// <stdin>:62:3
  input        clk,	// <stdin>:62:28
               rst,	// <stdin>:62:42
  input  [7:0] Data_In,	// <stdin>:62:56
  output [9:0] Data_Out	// <stdin>:62:75
);

  reg  [9:0] FIR;	// <stdin>:196:15
  reg  [9:0] FIR_0;	// <stdin>:194:15
  reg  [9:0] FIR_1;	// <stdin>:192:15
  reg  [9:0] FIR_2;	// <stdin>:190:15
  reg  [9:0] FIR_3;	// <stdin>:188:15
  reg  [9:0] FIR_4;	// <stdin>:186:15
  reg  [9:0] FIR_5;	// <stdin>:184:15
  reg  [9:0] FIR_6;	// <stdin>:182:15
  reg  [9:0] FIR_7;	// <stdin>:180:15
  reg  [9:0] FIR_8;	// <stdin>:178:15
  reg  [9:0] FIR_9;	// <stdin>:176:15
  reg  [9:0] FIR_10;	// <stdin>:174:15
  reg  [9:0] FIR_11;	// <stdin>:172:15
  reg  [9:0] FIR_12;	// <stdin>:170:15
  reg  [9:0] FIR_13;	// <stdin>:168:15
  reg  [9:0] FIR_14;	// <stdin>:166:15
  reg  [9:0] FIR_15;	// <stdin>:164:15
  reg  [9:0] FIR_16;	// <stdin>:162:15
  reg  [9:0] FIR_17;	// <stdin>:160:15
  reg  [9:0] FIR_18;	// <stdin>:158:15
  reg  [9:0] FIR_19;	// <stdin>:156:14
  reg  [9:0] FIR_20;	// <stdin>:154:14
  reg  [9:0] FIR_21;	// <stdin>:152:14
  reg  [9:0] FIR_22;	// <stdin>:150:14
  reg  [9:0] FIR_23;	// <stdin>:148:14
  reg  [9:0] FIR_24;	// <stdin>:146:14
  reg  [9:0] FIR_25;	// <stdin>:144:14
  reg  [9:0] FIR_26;	// <stdin>:142:14
  reg  [9:0] FIR_27;	// <stdin>:140:14
  reg  [9:0] FIR_28;	// <stdin>:138:14
  reg  [9:0] FIR_29;	// <stdin>:136:12
  wire [9:0] _GEN = {2'h0, Data_In};	// <stdin>:81:14, :83:10
  always @(posedge clk) begin	// <stdin>:198:5
    FIR_29 <= rst ? 10'h0 : _GEN;	// <stdin>:74:15, :83:10, :105:11, :199:7
    FIR_28 <= rst ? 10'h0 : FIR;	// <stdin>:74:15, :106:11, :197:11, :200:7
    FIR_27 <= rst ? 10'h0 : FIR_0;	// <stdin>:74:15, :107:11, :195:11, :201:7
    FIR_26 <= rst ? 10'h0 : FIR_1;	// <stdin>:74:15, :108:11, :193:11, :202:7
    FIR_25 <= rst ? 10'h0 : FIR_2;	// <stdin>:74:15, :109:11, :191:11, :203:7
    FIR_24 <= rst ? 10'h0 : FIR_3;	// <stdin>:74:15, :110:11, :189:11, :204:7
    FIR_23 <= rst ? 10'h0 : FIR_4;	// <stdin>:74:15, :111:11, :187:11, :205:7
    FIR_22 <= rst ? 10'h0 : FIR_5;	// <stdin>:74:15, :112:11, :185:11, :206:7
    FIR_21 <= rst ? 10'h0 : FIR_6;	// <stdin>:74:15, :113:11, :183:11, :207:7
    FIR_20 <= rst ? 10'h0 : FIR_7;	// <stdin>:74:15, :114:11, :181:11, :208:7
    FIR_19 <= rst ? 10'h0 : FIR_8;	// <stdin>:74:15, :115:11, :179:11, :209:7
    FIR_18 <= rst ? 10'h0 : FIR_9;	// <stdin>:74:15, :116:11, :177:11, :210:7
    FIR_17 <= rst ? 10'h0 : FIR_10;	// <stdin>:74:15, :117:11, :175:11, :211:7
    FIR_16 <= rst ? 10'h0 : FIR_11;	// <stdin>:74:15, :118:11, :173:11, :212:7
    FIR_15 <= rst ? 10'h0 : FIR_12;	// <stdin>:74:15, :119:11, :171:11, :213:7
    FIR_14 <= rst ? 10'h0 : FIR_13;	// <stdin>:74:15, :120:11, :169:11, :214:7
    FIR_13 <= rst ? 10'h0 : FIR_14;	// <stdin>:74:15, :121:11, :167:11, :215:7
    FIR_12 <= rst ? 10'h0 : FIR_15;	// <stdin>:74:15, :122:11, :165:11, :216:7
    FIR_11 <= rst ? 10'h0 : FIR_16;	// <stdin>:74:15, :123:11, :163:11, :217:7
    FIR_10 <= rst ? 10'h0 : FIR_17;	// <stdin>:74:15, :124:11, :161:11, :218:7
    FIR_9 <= rst ? 10'h0 : FIR_18;	// <stdin>:74:15, :125:11, :159:11, :219:7
    FIR_8 <= rst ? 10'h0 : FIR_19;	// <stdin>:74:15, :126:11, :157:11, :220:7
    FIR_7 <= rst ? 10'h0 : FIR_20;	// <stdin>:74:15, :127:11, :155:11, :221:7
    FIR_6 <= rst ? 10'h0 : FIR_21;	// <stdin>:74:15, :128:11, :153:11, :222:7
    FIR_5 <= rst ? 10'h0 : FIR_22;	// <stdin>:74:15, :129:11, :151:11, :223:7
    FIR_4 <= rst ? 10'h0 : FIR_23;	// <stdin>:74:15, :130:11, :149:11, :224:7
    FIR_3 <= rst ? 10'h0 : FIR_24;	// <stdin>:74:15, :131:11, :147:11, :225:7
    FIR_2 <= rst ? 10'h0 : FIR_25;	// <stdin>:74:15, :132:11, :145:11, :226:7
    FIR_1 <= rst ? 10'h0 : FIR_26;	// <stdin>:74:15, :133:11, :143:11, :227:7
    FIR_0 <= rst ? 10'h0 : FIR_27;	// <stdin>:74:15, :134:11, :141:11, :228:7
    FIR <= rst ? 10'h0 : FIR_28;	// <stdin>:74:15, :135:11, :139:11, :229:7
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// <stdin>:231:5
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:233:9
      `FIRRTL_BEFORE_INITIAL	// <stdin>:234:11
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:236:9
      automatic logic [31:0] _RANDOM[0:9];	// <stdin>:241:24
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:237:11
        `INIT_RANDOM_PROLOG_	// <stdin>:238:13
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:240:11
        for (logic [3:0] i = 4'h0; i < 4'hA; i += 4'h1) begin
          _RANDOM[i] = `RANDOM;	// <stdin>:243:25, :244:22, :245:15
        end	// <stdin>:71:14, :72:15, :73:14
        FIR_29 = _RANDOM[4'h0][9:0];	// <stdin>:73:14, :247:19, :257:19, :258:19, :259:13
        FIR_28 = _RANDOM[4'h0][19:10];	// <stdin>:73:14, :247:19, :260:19, :261:19, :262:13
        FIR_27 = _RANDOM[4'h0][29:20];	// <stdin>:73:14, :247:19, :263:19, :264:19, :265:13
        FIR_26 = {_RANDOM[4'h0][31:30], _RANDOM[4'h1][7:0]};	// <stdin>:71:14, :73:14, :247:19, :248:19, :266:20, :267:20, :268:20, :269:20, :270:20, :271:13
        FIR_25 = _RANDOM[4'h1][17:8];	// <stdin>:71:14, :248:19, :272:20, :273:20, :274:13
        FIR_24 = _RANDOM[4'h1][27:18];	// <stdin>:71:14, :248:19, :275:20, :276:20, :277:13
        FIR_23 = {_RANDOM[4'h1][31:28], _RANDOM[4'h2][5:0]};	// <stdin>:70:14, :71:14, :248:19, :249:19, :278:20, :279:20, :280:20, :281:20, :282:20, :283:13
        FIR_22 = _RANDOM[4'h2][15:6];	// <stdin>:70:14, :249:19, :284:20, :285:20, :286:13
        FIR_21 = _RANDOM[4'h2][25:16];	// <stdin>:70:14, :249:19, :287:20, :288:20, :289:13
        FIR_20 = {_RANDOM[4'h2][31:26], _RANDOM[4'h3][3:0]};	// <stdin>:69:14, :70:14, :249:19, :250:19, :290:20, :291:20, :292:20, :293:20, :294:20, :295:13
        FIR_19 = _RANDOM[4'h3][13:4];	// <stdin>:69:14, :250:19, :296:20, :297:20, :298:13
        FIR_18 = _RANDOM[4'h3][23:14];	// <stdin>:69:14, :250:19, :299:20, :300:20, :301:13
        FIR_17 = {_RANDOM[4'h3][31:24], _RANDOM[4'h4][1:0]};	// <stdin>:68:14, :69:14, :250:19, :251:19, :302:20, :303:20, :304:20, :305:20, :306:20, :307:13
        FIR_16 = _RANDOM[4'h4][11:2];	// <stdin>:68:14, :251:19, :308:20, :309:20, :310:13
        FIR_15 = _RANDOM[4'h4][21:12];	// <stdin>:68:14, :251:19, :311:20, :312:20, :313:13
        FIR_14 = _RANDOM[4'h4][31:22];	// <stdin>:68:14, :251:19, :314:20, :315:20, :316:13
        FIR_13 = _RANDOM[4'h5][9:0];	// <stdin>:67:14, :252:19, :317:20, :318:20, :319:13
        FIR_12 = _RANDOM[4'h5][19:10];	// <stdin>:67:14, :252:19, :320:20, :321:20, :322:13
        FIR_11 = _RANDOM[4'h5][29:20];	// <stdin>:67:14, :252:19, :323:20, :324:20, :325:13
        FIR_10 = {_RANDOM[4'h5][31:30], _RANDOM[4'h6][7:0]};	// <stdin>:66:14, :67:14, :252:19, :253:19, :326:20, :327:20, :328:20, :329:20, :330:20, :331:13
        FIR_9 = _RANDOM[4'h6][17:8];	// <stdin>:66:14, :253:19, :332:20, :333:20, :334:13
        FIR_8 = _RANDOM[4'h6][27:18];	// <stdin>:66:14, :253:19, :335:20, :336:20, :337:13
        FIR_7 = {_RANDOM[4'h6][31:28], _RANDOM[4'h7][5:0]};	// <stdin>:65:14, :66:14, :253:19, :254:19, :338:20, :339:20, :340:20, :341:20, :342:20, :343:13
        FIR_6 = _RANDOM[4'h7][15:6];	// <stdin>:65:14, :254:19, :344:20, :345:20, :346:13
        FIR_5 = _RANDOM[4'h7][25:16];	// <stdin>:65:14, :254:19, :347:20, :348:20, :349:13
        FIR_4 = {_RANDOM[4'h7][31:26], _RANDOM[4'h8][3:0]};	// <stdin>:64:15, :65:14, :254:19, :255:19, :350:20, :351:20, :352:20, :353:20, :354:20, :355:13
        FIR_3 = _RANDOM[4'h8][13:4];	// <stdin>:64:15, :255:19, :356:20, :357:20, :358:13
        FIR_2 = _RANDOM[4'h8][23:14];	// <stdin>:64:15, :255:19, :359:20, :360:20, :361:13
        FIR_1 = {_RANDOM[4'h8][31:24], _RANDOM[4'h9][1:0]};	// <stdin>:63:15, :64:15, :255:19, :256:19, :362:20, :363:20, :364:20, :365:20, :366:20, :367:13
        FIR_0 = _RANDOM[4'h9][11:2];	// <stdin>:63:15, :256:19, :368:20, :369:20, :370:13
        FIR = _RANDOM[4'h9][21:12];	// <stdin>:63:15, :256:19, :371:20, :372:20, :373:13
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:376:9
      `FIRRTL_AFTER_INITIAL	// <stdin>:377:11
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign Data_Out =
    _GEN * 10'h3 + {FIR[8:0], 1'h0} + FIR_0 + {FIR_8[7:0], 2'h0} + FIR_9 * 10'hC + FIR_10
    * 10'h15 + FIR_11 * 10'h1E + FIR_12 * 10'h25 + FIR_13 * 10'h29 + FIR_14 * 10'h29
    + FIR_15 * 10'h25 + FIR_16 * 10'h1E + FIR_17 * 10'h15 + FIR_18 * 10'hC
    + {FIR_19[7:0], 2'h0} + FIR_27 + {FIR_28[8:0], 1'h0} + FIR_29 * 10'h3;	// <stdin>:75:16, :76:16, :77:16, :78:16, :79:16, :80:15, :81:14, :82:14, :83:10, :84:10, :85:10, :86:10, :87:10, :88:10, :89:10, :90:10, :91:10, :92:10, :93:11, :94:11, :95:11, :96:11, :97:11, :98:11, :99:11, :100:11, :101:11, :102:11, :103:11, :104:11, :137:11, :139:11, :141:11, :157:11, :159:11, :161:11, :163:11, :165:11, :167:11, :169:11, :171:11, :173:11, :175:11, :177:11, :179:11, :195:11, :197:11, :381:5
endmodule

